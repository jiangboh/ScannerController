package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BCAST_HISTORY".
*/
public class BcastHistoryDao extends AbstractDao<BcastHistory, Long> {

    public static final String TABLENAME = "BCAST_HISTORY";

    /**
     * Properties of entity BcastHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FemtoSn = new Property(1, String.class, "FemtoSn", false, "FEMTO_SN");
        public final static Property FemtoVer = new Property(2, String.class, "FemtoVer", false, "FEMTO_VER");
        public final static Property MacAddress = new Property(3, String.class, "MacAddress", false, "MAC_ADDRESS");
        public final static Property Statrtime = new Property(4, Long.class, "statrtime", false, "STATRTIME");
        public final static Property Endtime = new Property(5, Long.class, "endtime", false, "ENDTIME");
        public final static Property Tech = new Property(6, String.class, "Tech", false, "TECH");
        public final static Property Band = new Property(7, String.class, "Band", false, "BAND");
        public final static Property Channel = new Property(8, String.class, "Channel", false, "CHANNEL");
        public final static Property Cid = new Property(9, String.class, "Cid", false, "CID");
        public final static Property BRealEnd = new Property(10, boolean.class, "bRealEnd", false, "B_REAL_END");
    }


    public BcastHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public BcastHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BCAST_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FEMTO_SN\" TEXT," + // 1: FemtoSn
                "\"FEMTO_VER\" TEXT," + // 2: FemtoVer
                "\"MAC_ADDRESS\" TEXT," + // 3: MacAddress
                "\"STATRTIME\" INTEGER," + // 4: statrtime
                "\"ENDTIME\" INTEGER," + // 5: endtime
                "\"TECH\" TEXT," + // 6: Tech
                "\"BAND\" TEXT," + // 7: Band
                "\"CHANNEL\" TEXT," + // 8: Channel
                "\"CID\" TEXT," + // 9: Cid
                "\"B_REAL_END\" INTEGER NOT NULL );"); // 10: bRealEnd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BCAST_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BcastHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FemtoSn = entity.getFemtoSn();
        if (FemtoSn != null) {
            stmt.bindString(2, FemtoSn);
        }
 
        String FemtoVer = entity.getFemtoVer();
        if (FemtoVer != null) {
            stmt.bindString(3, FemtoVer);
        }
 
        String MacAddress = entity.getMacAddress();
        if (MacAddress != null) {
            stmt.bindString(4, MacAddress);
        }
 
        Long statrtime = entity.getStatrtime();
        if (statrtime != null) {
            stmt.bindLong(5, statrtime);
        }
 
        Long endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(6, endtime);
        }
 
        String Tech = entity.getTech();
        if (Tech != null) {
            stmt.bindString(7, Tech);
        }
 
        String Band = entity.getBand();
        if (Band != null) {
            stmt.bindString(8, Band);
        }
 
        String Channel = entity.getChannel();
        if (Channel != null) {
            stmt.bindString(9, Channel);
        }
 
        String Cid = entity.getCid();
        if (Cid != null) {
            stmt.bindString(10, Cid);
        }
        stmt.bindLong(11, entity.getBRealEnd() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BcastHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FemtoSn = entity.getFemtoSn();
        if (FemtoSn != null) {
            stmt.bindString(2, FemtoSn);
        }
 
        String FemtoVer = entity.getFemtoVer();
        if (FemtoVer != null) {
            stmt.bindString(3, FemtoVer);
        }
 
        String MacAddress = entity.getMacAddress();
        if (MacAddress != null) {
            stmt.bindString(4, MacAddress);
        }
 
        Long statrtime = entity.getStatrtime();
        if (statrtime != null) {
            stmt.bindLong(5, statrtime);
        }
 
        Long endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(6, endtime);
        }
 
        String Tech = entity.getTech();
        if (Tech != null) {
            stmt.bindString(7, Tech);
        }
 
        String Band = entity.getBand();
        if (Band != null) {
            stmt.bindString(8, Band);
        }
 
        String Channel = entity.getChannel();
        if (Channel != null) {
            stmt.bindString(9, Channel);
        }
 
        String Cid = entity.getCid();
        if (Cid != null) {
            stmt.bindString(10, Cid);
        }
        stmt.bindLong(11, entity.getBRealEnd() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BcastHistory readEntity(Cursor cursor, int offset) {
        BcastHistory entity = new BcastHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FemtoSn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FemtoVer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MacAddress
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // statrtime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // endtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Tech
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Band
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Channel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Cid
            cursor.getShort(offset + 10) != 0 // bRealEnd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BcastHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFemtoSn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFemtoVer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMacAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatrtime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEndtime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTech(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBand(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChannel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBRealEnd(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BcastHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BcastHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BcastHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
