package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TARGET_USER".
*/
public class TargetUserDao extends AbstractDao<TargetUser, Long> {

    public static final String TABLENAME = "TARGET_USER";

    /**
     * Properties of entity TargetUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrImsi = new Property(1, String.class, "strImsi", false, "STR_IMSI");
        public final static Property StrImei = new Property(2, String.class, "strImei", false, "STR_IMEI");
        public final static Property StrName = new Property(3, String.class, "strName", false, "STR_NAME");
        public final static Property BCheck = new Property(4, boolean.class, "bCheck", false, "B_CHECK");
        public final static Property StrTech = new Property(5, String.class, "strTech", false, "STR_TECH");
        public final static Property StrBand = new Property(6, String.class, "strBand", false, "STR_BAND");
        public final static Property StrChannel = new Property(7, String.class, "strChannel", false, "STR_CHANNEL");
        public final static Property BRedir = new Property(8, boolean.class, "bRedir", false, "B_REDIR");
    }


    public TargetUserDao(DaoConfig config) {
        super(config);
    }
    
    public TargetUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TARGET_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STR_IMSI\" TEXT," + // 1: strImsi
                "\"STR_IMEI\" TEXT," + // 2: strImei
                "\"STR_NAME\" TEXT," + // 3: strName
                "\"B_CHECK\" INTEGER NOT NULL ," + // 4: bCheck
                "\"STR_TECH\" TEXT," + // 5: strTech
                "\"STR_BAND\" TEXT," + // 6: strBand
                "\"STR_CHANNEL\" TEXT," + // 7: strChannel
                "\"B_REDIR\" INTEGER NOT NULL );"); // 8: bRedir
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TARGET_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TargetUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strImsi = entity.getStrImsi();
        if (strImsi != null) {
            stmt.bindString(2, strImsi);
        }
 
        String strImei = entity.getStrImei();
        if (strImei != null) {
            stmt.bindString(3, strImei);
        }
 
        String strName = entity.getStrName();
        if (strName != null) {
            stmt.bindString(4, strName);
        }
        stmt.bindLong(5, entity.getBCheck() ? 1L: 0L);
 
        String strTech = entity.getStrTech();
        if (strTech != null) {
            stmt.bindString(6, strTech);
        }
 
        String strBand = entity.getStrBand();
        if (strBand != null) {
            stmt.bindString(7, strBand);
        }
 
        String strChannel = entity.getStrChannel();
        if (strChannel != null) {
            stmt.bindString(8, strChannel);
        }
        stmt.bindLong(9, entity.getBRedir() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TargetUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strImsi = entity.getStrImsi();
        if (strImsi != null) {
            stmt.bindString(2, strImsi);
        }
 
        String strImei = entity.getStrImei();
        if (strImei != null) {
            stmt.bindString(3, strImei);
        }
 
        String strName = entity.getStrName();
        if (strName != null) {
            stmt.bindString(4, strName);
        }
        stmt.bindLong(5, entity.getBCheck() ? 1L: 0L);
 
        String strTech = entity.getStrTech();
        if (strTech != null) {
            stmt.bindString(6, strTech);
        }
 
        String strBand = entity.getStrBand();
        if (strBand != null) {
            stmt.bindString(7, strBand);
        }
 
        String strChannel = entity.getStrChannel();
        if (strChannel != null) {
            stmt.bindString(8, strChannel);
        }
        stmt.bindLong(9, entity.getBRedir() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TargetUser readEntity(Cursor cursor, int offset) {
        TargetUser entity = new TargetUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strImsi
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strImei
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // strName
            cursor.getShort(offset + 4) != 0, // bCheck
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strTech
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strBand
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strChannel
            cursor.getShort(offset + 8) != 0 // bRedir
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TargetUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrImsi(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrImei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStrName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBCheck(cursor.getShort(offset + 4) != 0);
        entity.setStrTech(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrBand(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrChannel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBRedir(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TargetUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TargetUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TargetUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
