package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SNIFFER_HISTORY".
*/
public class SnifferHistoryDao extends AbstractDao<SnifferHistory, Long> {

    public static final String TABLENAME = "SNIFFER_HISTORY";

    /**
     * Properties of entity SnifferHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property Channel = new Property(2, String.class, "channel", false, "CHANNEL");
        public final static Property Band = new Property(3, String.class, "band", false, "BAND");
        public final static Property Tech = new Property(4, String.class, "tech", false, "TECH");
        public final static Property Cid = new Property(5, String.class, "cid", false, "CID");
        public final static Property Rncid = new Property(6, String.class, "rncid", false, "RNCID");
        public final static Property Mcc = new Property(7, String.class, "mcc", false, "MCC");
        public final static Property Mnc = new Property(8, String.class, "mnc", false, "MNC");
        public final static Property Bsic = new Property(9, String.class, "bsic", false, "BSIC");
        public final static Property Rssi = new Property(10, String.class, "rssi", false, "RSSI");
        public final static Property Lac = new Property(11, String.class, "lac", false, "LAC");
        public final static Property Psc = new Property(12, String.class, "psc", false, "PSC");
        public final static Property Rscp = new Property(13, String.class, "rscp", false, "RSCP");
        public final static Property Bandwidth = new Property(14, String.class, "bandwidth", false, "BANDWIDTH");
        public final static Property Tac = new Property(15, String.class, "tac", false, "TAC");
        public final static Property Pci = new Property(16, String.class, "pci", false, "PCI");
        public final static Property Rsrp = new Property(17, String.class, "rsrp", false, "RSRP");
    }


    public SnifferHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SnifferHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SNIFFER_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"CHANNEL\" TEXT," + // 2: channel
                "\"BAND\" TEXT," + // 3: band
                "\"TECH\" TEXT," + // 4: tech
                "\"CID\" TEXT," + // 5: cid
                "\"RNCID\" TEXT," + // 6: rncid
                "\"MCC\" TEXT," + // 7: mcc
                "\"MNC\" TEXT," + // 8: mnc
                "\"BSIC\" TEXT," + // 9: bsic
                "\"RSSI\" TEXT," + // 10: rssi
                "\"LAC\" TEXT," + // 11: lac
                "\"PSC\" TEXT," + // 12: psc
                "\"RSCP\" TEXT," + // 13: rscp
                "\"BANDWIDTH\" TEXT," + // 14: bandwidth
                "\"TAC\" TEXT," + // 15: tac
                "\"PCI\" TEXT," + // 16: pci
                "\"RSRP\" TEXT);"); // 17: rsrp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SNIFFER_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SnifferHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String band = entity.getBand();
        if (band != null) {
            stmt.bindString(4, band);
        }
 
        String tech = entity.getTech();
        if (tech != null) {
            stmt.bindString(5, tech);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(6, cid);
        }
 
        String rncid = entity.getRncid();
        if (rncid != null) {
            stmt.bindString(7, rncid);
        }
 
        String mcc = entity.getMcc();
        if (mcc != null) {
            stmt.bindString(8, mcc);
        }
 
        String mnc = entity.getMnc();
        if (mnc != null) {
            stmt.bindString(9, mnc);
        }
 
        String bsic = entity.getBsic();
        if (bsic != null) {
            stmt.bindString(10, bsic);
        }
 
        String rssi = entity.getRssi();
        if (rssi != null) {
            stmt.bindString(11, rssi);
        }
 
        String lac = entity.getLac();
        if (lac != null) {
            stmt.bindString(12, lac);
        }
 
        String psc = entity.getPsc();
        if (psc != null) {
            stmt.bindString(13, psc);
        }
 
        String rscp = entity.getRscp();
        if (rscp != null) {
            stmt.bindString(14, rscp);
        }
 
        String bandwidth = entity.getBandwidth();
        if (bandwidth != null) {
            stmt.bindString(15, bandwidth);
        }
 
        String tac = entity.getTac();
        if (tac != null) {
            stmt.bindString(16, tac);
        }
 
        String pci = entity.getPci();
        if (pci != null) {
            stmt.bindString(17, pci);
        }
 
        String rsrp = entity.getRsrp();
        if (rsrp != null) {
            stmt.bindString(18, rsrp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SnifferHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String band = entity.getBand();
        if (band != null) {
            stmt.bindString(4, band);
        }
 
        String tech = entity.getTech();
        if (tech != null) {
            stmt.bindString(5, tech);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(6, cid);
        }
 
        String rncid = entity.getRncid();
        if (rncid != null) {
            stmt.bindString(7, rncid);
        }
 
        String mcc = entity.getMcc();
        if (mcc != null) {
            stmt.bindString(8, mcc);
        }
 
        String mnc = entity.getMnc();
        if (mnc != null) {
            stmt.bindString(9, mnc);
        }
 
        String bsic = entity.getBsic();
        if (bsic != null) {
            stmt.bindString(10, bsic);
        }
 
        String rssi = entity.getRssi();
        if (rssi != null) {
            stmt.bindString(11, rssi);
        }
 
        String lac = entity.getLac();
        if (lac != null) {
            stmt.bindString(12, lac);
        }
 
        String psc = entity.getPsc();
        if (psc != null) {
            stmt.bindString(13, psc);
        }
 
        String rscp = entity.getRscp();
        if (rscp != null) {
            stmt.bindString(14, rscp);
        }
 
        String bandwidth = entity.getBandwidth();
        if (bandwidth != null) {
            stmt.bindString(15, bandwidth);
        }
 
        String tac = entity.getTac();
        if (tac != null) {
            stmt.bindString(16, tac);
        }
 
        String pci = entity.getPci();
        if (pci != null) {
            stmt.bindString(17, pci);
        }
 
        String rsrp = entity.getRsrp();
        if (rsrp != null) {
            stmt.bindString(18, rsrp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SnifferHistory readEntity(Cursor cursor, int offset) {
        SnifferHistory entity = new SnifferHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // band
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tech
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rncid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mcc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mnc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bsic
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rssi
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lac
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // psc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rscp
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bandwidth
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tac
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // pci
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // rsrp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SnifferHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setChannel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTech(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRncid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMcc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMnc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBsic(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRssi(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLac(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPsc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRscp(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBandwidth(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTac(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPci(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRsrp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SnifferHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SnifferHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SnifferHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
