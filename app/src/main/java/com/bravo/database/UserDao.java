package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SrtImsi = new Property(1, String.class, "srtImsi", false, "SRT_IMSI");
        public final static Property StrImei = new Property(2, String.class, "strImei", false, "STR_IMEI");
        public final static Property IAuth = new Property(3, int.class, "iAuth", false, "I_AUTH");
        public final static Property BSilent = new Property(4, boolean.class, "bSilent", false, "B_SILENT");
        public final static Property ICount = new Property(5, int.class, "iCount", false, "I_COUNT");
        public final static Property ConnTime = new Property(6, Long.class, "ConnTime", false, "CONN_TIME");
        public final static Property AttachTime = new Property(7, Long.class, "AttachTime", false, "ATTACH_TIME");
        public final static Property DetachTime = new Property(8, Long.class, "DetachTime", false, "DETACH_TIME");
        public final static Property Unique = new Property(9, String.class, "Unique", false, "UNIQUE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SRT_IMSI\" TEXT," + // 1: srtImsi
                "\"STR_IMEI\" TEXT," + // 2: strImei
                "\"I_AUTH\" INTEGER NOT NULL ," + // 3: iAuth
                "\"B_SILENT\" INTEGER NOT NULL ," + // 4: bSilent
                "\"I_COUNT\" INTEGER NOT NULL ," + // 5: iCount
                "\"CONN_TIME\" INTEGER," + // 6: ConnTime
                "\"ATTACH_TIME\" INTEGER," + // 7: AttachTime
                "\"DETACH_TIME\" INTEGER," + // 8: DetachTime
                "\"UNIQUE\" TEXT);"); // 9: Unique
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String srtImsi = entity.getSrtImsi();
        if (srtImsi != null) {
            stmt.bindString(2, srtImsi);
        }
 
        String strImei = entity.getStrImei();
        if (strImei != null) {
            stmt.bindString(3, strImei);
        }
        stmt.bindLong(4, entity.getIAuth());
        stmt.bindLong(5, entity.getBSilent() ? 1L: 0L);
        stmt.bindLong(6, entity.getICount());
 
        Long ConnTime = entity.getConnTime();
        if (ConnTime != null) {
            stmt.bindLong(7, ConnTime);
        }
 
        Long AttachTime = entity.getAttachTime();
        if (AttachTime != null) {
            stmt.bindLong(8, AttachTime);
        }
 
        Long DetachTime = entity.getDetachTime();
        if (DetachTime != null) {
            stmt.bindLong(9, DetachTime);
        }
 
        String Unique = entity.getUnique();
        if (Unique != null) {
            stmt.bindString(10, Unique);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String srtImsi = entity.getSrtImsi();
        if (srtImsi != null) {
            stmt.bindString(2, srtImsi);
        }
 
        String strImei = entity.getStrImei();
        if (strImei != null) {
            stmt.bindString(3, strImei);
        }
        stmt.bindLong(4, entity.getIAuth());
        stmt.bindLong(5, entity.getBSilent() ? 1L: 0L);
        stmt.bindLong(6, entity.getICount());
 
        Long ConnTime = entity.getConnTime();
        if (ConnTime != null) {
            stmt.bindLong(7, ConnTime);
        }
 
        Long AttachTime = entity.getAttachTime();
        if (AttachTime != null) {
            stmt.bindLong(8, AttachTime);
        }
 
        Long DetachTime = entity.getDetachTime();
        if (DetachTime != null) {
            stmt.bindLong(9, DetachTime);
        }
 
        String Unique = entity.getUnique();
        if (Unique != null) {
            stmt.bindString(10, Unique);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // srtImsi
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strImei
            cursor.getInt(offset + 3), // iAuth
            cursor.getShort(offset + 4) != 0, // bSilent
            cursor.getInt(offset + 5), // iCount
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // ConnTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // AttachTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // DetachTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Unique
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSrtImsi(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStrImei(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIAuth(cursor.getInt(offset + 3));
        entity.setBSilent(cursor.getShort(offset + 4) != 0);
        entity.setICount(cursor.getInt(offset + 5));
        entity.setConnTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAttachTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDetachTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUnique(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
