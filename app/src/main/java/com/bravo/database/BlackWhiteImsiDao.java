package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLACK_WHITE_IMSI".
*/
public class BlackWhiteImsiDao extends AbstractDao<BlackWhiteImsi, Long> {

    public static final String TABLENAME = "BLACK_WHITE_IMSI";

    /**
     * Properties of entity BlackWhiteImsi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Imsi = new Property(2, String.class, "Imsi", false, "IMSI");
        public final static Property Imei = new Property(3, String.class, "Imei", false, "IMEI");
        public final static Property Tmsi = new Property(4, String.class, "Tmsi", false, "TMSI");
        public final static Property StartRb = new Property(5, int.class, "StartRb", false, "START_RB");
        public final static Property StopRb = new Property(6, int.class, "StopRb", false, "STOP_RB");
        public final static Property Type = new Property(7, int.class, "Type", false, "TYPE");
    }


    public BlackWhiteImsiDao(DaoConfig config) {
        super(config);
    }
    
    public BlackWhiteImsiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLACK_WHITE_IMSI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"NAME\" TEXT," + // 1: Name
                "\"IMSI\" TEXT," + // 2: Imsi
                "\"IMEI\" TEXT," + // 3: Imei
                "\"TMSI\" TEXT," + // 4: Tmsi
                "\"START_RB\" INTEGER NOT NULL ," + // 5: StartRb
                "\"STOP_RB\" INTEGER NOT NULL ," + // 6: StopRb
                "\"TYPE\" INTEGER NOT NULL );"); // 7: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLACK_WHITE_IMSI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BlackWhiteImsi entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Imsi = entity.getImsi();
        if (Imsi != null) {
            stmt.bindString(3, Imsi);
        }
 
        String Imei = entity.getImei();
        if (Imei != null) {
            stmt.bindString(4, Imei);
        }
 
        String Tmsi = entity.getTmsi();
        if (Tmsi != null) {
            stmt.bindString(5, Tmsi);
        }
        stmt.bindLong(6, entity.getStartRb());
        stmt.bindLong(7, entity.getStopRb());
        stmt.bindLong(8, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BlackWhiteImsi entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Imsi = entity.getImsi();
        if (Imsi != null) {
            stmt.bindString(3, Imsi);
        }
 
        String Imei = entity.getImei();
        if (Imei != null) {
            stmt.bindString(4, Imei);
        }
 
        String Tmsi = entity.getTmsi();
        if (Tmsi != null) {
            stmt.bindString(5, Tmsi);
        }
        stmt.bindLong(6, entity.getStartRb());
        stmt.bindLong(7, entity.getStopRb());
        stmt.bindLong(8, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BlackWhiteImsi readEntity(Cursor cursor, int offset) {
        BlackWhiteImsi entity = new BlackWhiteImsi( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Imsi
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Imei
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Tmsi
            cursor.getInt(offset + 5), // StartRb
            cursor.getInt(offset + 6), // StopRb
            cursor.getInt(offset + 7) // Type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BlackWhiteImsi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImsi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImei(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTmsi(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartRb(cursor.getInt(offset + 5));
        entity.setStopRb(cursor.getInt(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BlackWhiteImsi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BlackWhiteImsi entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BlackWhiteImsi entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
