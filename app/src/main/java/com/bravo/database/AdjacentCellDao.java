package com.bravo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADJACENT_CELL".
*/
public class AdjacentCellDao extends AbstractDao<AdjacentCell, Long> {

    public static final String TABLENAME = "ADJACENT_CELL";

    /**
     * Properties of entity AdjacentCell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrTech = new Property(1, String.class, "strTech", false, "STR_TECH");
        public final static Property IChannel = new Property(2, int.class, "iChannel", false, "I_CHANNEL");
        public final static Property IRncid = new Property(3, int.class, "iRncid", false, "I_RNCID");
        public final static Property ILac = new Property(4, int.class, "iLac", false, "I_LAC");
        public final static Property IPsc = new Property(5, int.class, "iPsc", false, "I_PSC");
        public final static Property ICid = new Property(6, int.class, "iCid", false, "I_CID");
        public final static Property ITac = new Property(7, int.class, "iTac", false, "I_TAC");
        public final static Property IPci = new Property(8, int.class, "iPci", false, "I_PCI");
        public final static Property BCheck = new Property(9, boolean.class, "bCheck", false, "B_CHECK");
    }


    public AdjacentCellDao(DaoConfig config) {
        super(config);
    }
    
    public AdjacentCellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADJACENT_CELL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STR_TECH\" TEXT," + // 1: strTech
                "\"I_CHANNEL\" INTEGER NOT NULL ," + // 2: iChannel
                "\"I_RNCID\" INTEGER NOT NULL ," + // 3: iRncid
                "\"I_LAC\" INTEGER NOT NULL ," + // 4: iLac
                "\"I_PSC\" INTEGER NOT NULL ," + // 5: iPsc
                "\"I_CID\" INTEGER NOT NULL ," + // 6: iCid
                "\"I_TAC\" INTEGER NOT NULL ," + // 7: iTac
                "\"I_PCI\" INTEGER NOT NULL ," + // 8: iPci
                "\"B_CHECK\" INTEGER NOT NULL );"); // 9: bCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADJACENT_CELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdjacentCell entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strTech = entity.getStrTech();
        if (strTech != null) {
            stmt.bindString(2, strTech);
        }
        stmt.bindLong(3, entity.getIChannel());
        stmt.bindLong(4, entity.getIRncid());
        stmt.bindLong(5, entity.getILac());
        stmt.bindLong(6, entity.getIPsc());
        stmt.bindLong(7, entity.getICid());
        stmt.bindLong(8, entity.getITac());
        stmt.bindLong(9, entity.getIPci());
        stmt.bindLong(10, entity.getBCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdjacentCell entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strTech = entity.getStrTech();
        if (strTech != null) {
            stmt.bindString(2, strTech);
        }
        stmt.bindLong(3, entity.getIChannel());
        stmt.bindLong(4, entity.getIRncid());
        stmt.bindLong(5, entity.getILac());
        stmt.bindLong(6, entity.getIPsc());
        stmt.bindLong(7, entity.getICid());
        stmt.bindLong(8, entity.getITac());
        stmt.bindLong(9, entity.getIPci());
        stmt.bindLong(10, entity.getBCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdjacentCell readEntity(Cursor cursor, int offset) {
        AdjacentCell entity = new AdjacentCell( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strTech
            cursor.getInt(offset + 2), // iChannel
            cursor.getInt(offset + 3), // iRncid
            cursor.getInt(offset + 4), // iLac
            cursor.getInt(offset + 5), // iPsc
            cursor.getInt(offset + 6), // iCid
            cursor.getInt(offset + 7), // iTac
            cursor.getInt(offset + 8), // iPci
            cursor.getShort(offset + 9) != 0 // bCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdjacentCell entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrTech(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIChannel(cursor.getInt(offset + 2));
        entity.setIRncid(cursor.getInt(offset + 3));
        entity.setILac(cursor.getInt(offset + 4));
        entity.setIPsc(cursor.getInt(offset + 5));
        entity.setICid(cursor.getInt(offset + 6));
        entity.setITac(cursor.getInt(offset + 7));
        entity.setIPci(cursor.getInt(offset + 8));
        entity.setBCheck(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdjacentCell entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdjacentCell entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdjacentCell entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
